{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","geo","setGeo","unit","setUnit","textDecoration","setTextDecoration","weatherHTML","setWeatherHTML","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","err","console","warn","code","message","enableHighAccuracy","timeout","maximumAge","Object","keys","length","fetch","then","response","text","data","catch","error","log","className","dangerouslySetInnerHTML","__html","onClick","onMouseEnter","onMouseLeave","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAwEeA,MArEf,WAAgB,IAAD,EACSC,IAAMC,SAAS,IADxB,mBACNC,EADM,KACDC,EADC,OAEWH,IAAMC,SAAS,UAF1B,mBAENG,EAFM,KAEAC,EAFA,OAG+BL,IAAMC,SAAS,QAH9C,mBAGNK,EAHM,KAGUC,EAHV,OAIyBP,IAAMC,SAAS,IAJxC,mBAINO,EAJM,KAIOC,EAJP,KAgDb,OA1CAT,IAAMU,WAAU,WAgBdC,UAAUC,YAAYC,oBATtB,SAAiBC,GACf,IAAIC,EAAMD,EAAIE,OACdb,EAAO,CAAEc,SAAUF,EAAIE,SAAUC,UAAWH,EAAIG,eAGlD,SAAeC,GACbC,QAAQC,KAAR,gBAAsBF,EAAIG,KAA1B,cAAoCH,EAAII,YAZ5B,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,MAab,IAEH1B,IAAMU,WAAU,WACViB,OAAOC,KAAK1B,GAAK2B,OAAS,GAC5BC,MAAM,uDAAD,OACoD5B,EAAIe,SADxD,gBACwEf,EAAIgB,UAD5E,kBAC+Fd,EAD/F,sDAGF2B,MAAK,SAAUC,GACd,OAAOA,EAASC,UAEjBF,MAAK,SAAUG,GACdzB,EAAeyB,MAEhBC,OAAM,SAACC,GAAD,OAAWhB,QAAQiB,IAAID,QAEjC,CAAClC,EAAKE,IAWP,qBAAKkC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SAC0B,IAAvB9B,EAAYqB,OAAe,KAC1B,qCACE,qBAAKU,wBAAyB,CAAEC,OAAQhC,KACxC,yBACEiC,QAfO,WAEfpC,EADW,WAATD,EACM,WAEA,WAYAsC,aAAc,kBAAMnC,EAAkB,cACtCoC,aAAc,kBAAMpC,EAAkB,SACtCqC,MAAO,CAAEtC,kBAJX,wBAMuB,aAATF,EAAsB,aAAe,qBCnDhDyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e9dff229.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [geo, setGeo] = React.useState({});\n  const [unit, setUnit] = React.useState(\"metric\");\n  const [textDecoration, setTextDecoration] = React.useState(\"none\");\n  const [weatherHTML, setWeatherHTML] = React.useState(\"\");\n\n  React.useEffect(() => {\n    var options = {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0,\n    };\n\n    function success(pos) {\n      var crd = pos.coords;\n      setGeo({ latitude: crd.latitude, longitude: crd.longitude });\n    }\n\n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }, []);\n\n  React.useEffect(() => {\n    if (Object.keys(geo).length > 0) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?lat=${geo.latitude}&lon=${geo.longitude}&units=${unit}&mode=html&appid=cf372a8d905ea26fa72bd3f0e709ddb9`\n      )\n        .then(function (response) {\n          return response.text();\n        })\n        .then(function (data) {\n          setWeatherHTML(data);\n        })\n        .catch((error) => console.log(error));\n    }\n  }, [geo, unit]);\n\n  const handleUnit = () => {\n    if (unit === \"metric\") {\n      setUnit(\"imperial\");\n    } else {\n      setUnit(\"metric\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {weatherHTML.length === 0 ? null : (\n          <>\n            <div dangerouslySetInnerHTML={{ __html: weatherHTML }}></div>\n            <button\n              onClick={handleUnit}\n              onMouseEnter={() => setTextDecoration(\"underline\")}\n              onMouseLeave={() => setTextDecoration(\"none\")}\n              style={{ textDecoration }}\n            >\n              Convert to {unit === \"imperial\" ? \"Fahrenheit\" : \"Celsius\"}\n            </button>\n          </>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}